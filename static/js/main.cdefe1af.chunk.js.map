{"version":3,"sources":["logo.svg","Testing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Testing","className","selection","Selection","create","class","selectables","boundaries","on","inst","selected","oe","ctrlKey","metaKey","el","classList","remove","removeFromSelection","clearSelection","changed","removed","added","add","keepSelection","App","state","selectionEnabled","theme","this","enable","disable","onClick","setState","primary","variant","color","selectedElementsInstance","getSelection","src","logo","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdefe1af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n\nfunction Testing() {\n  return (\n    <div className=\"Tesinggggg\">\n      <p className=\"test1\">testing 1</p>\n      <p className=\"test1\">testing 2</p>\n      <p className=\"test1\">testing 3</p>\n      <p className=\"test1\">testing 4</p>\n      <p className=\"test1\">testing 5</p>\n    </div>\n  );\n}\n\nexport default Testing;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Testing from './Testing';\nimport Selection from '@simonwep/selection-js';\n\nimport { Button as SButton } from 'semantic-ui-react';\nimport { Button as MButton } from '@material-ui/core';\nimport { Button as BButton } from 'react-bootstrap';\n\n\nconst selection = Selection.create({\n  class: 'selection',\n  selectables: ['.test', '.App-logo', '.test1'],\n  boundaries: ['.App'],\n}).on('start', ({inst, selected, oe}) => {\n  // Remove class if the user isn't pressing the control key or âŒ˜ key\n  if (!oe.ctrlKey && !oe.metaKey) {\n    // Unselect all elements\n    for (const el of selected) {\n      el.classList.remove('selected');\n      inst.removeFromSelection(el);\n    }\n    // Clear previous selection\n    inst.clearSelection();\n  }\n}).on('move', ({changed: {removed, added}}) => {\n  // Add a custom class to the elements that where selected.\n  for (const el of added) {\n    el.classList.add('selected');\n  }\n  // Remove the class from elements that where removed\n  // since the last selection\n  for (const el of removed) {\n    el.classList.remove('selected');\n  }\n}).on('stop', ({inst}) => {\n  inst.keepSelection();\n});\n\nclass App extends React.Component {\n  state = {\n    selectionEnabled: true,\n    theme: 'react-semantic'\n  };\n\n  render() {\n    this.state.selectionEnabled ? selection.enable() : selection.disable();\n\n    return (\n      <div className={`App ${this.state.selectionEnabled ? 'selection-enabled' : 'selection-disabled' }`}>\n        <div>\n          <button onClick={() => this.setState({ theme: 'react-semantic' })}>React-Semantic</button>\n          <button onClick={() => this.setState({ theme: 'material-ui' })}>Material-UI</button>\n          <button onClick={() => this.setState({ theme: 'react-bootstrap' })}>React-Bootstrap</button>\n        </div>\n        <div>\n          { this.state.theme === 'react-semantic' && <SButton primary>Primary</SButton> }\n          { this.state.theme === 'material-ui' && <MButton variant=\"contained\" color=\"primary\">Primary</MButton> }\n          { this.state.theme === 'react-bootstrap' && <BButton variant=\"primary\">Primary</BButton> }\n        </div>\n        <header className=\"App-header\">\n          <button onClick={() => {\n            selection.enable();\n            this.setState({ selectionEnabled: true });\n          }}>Enable</button>\n          <button onClick={() => {\n            const selectedElementsInstance = [...selection.getSelection()]\n            for (const el of selectedElementsInstance) {\n              el.classList.remove('selected');\n              selection.removeFromSelection(el);\n            }\n            selection.clearSelection();\n            selection.disable();\n            this.setState({ selectionEnabled: false });\n          }}>Disable</button>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div className=\"testing-boundary\">\n            <p className=\"test\">testing 1</p>\n            <p className=\"test\">testing 2</p>\n            <p className=\"test\">testing 3</p>\n            <p className=\"test\">testing 4</p>\n            <p className=\"test\">testing 5</p>\n            <p className=\"test\">testing 2</p>\n            <p className=\"test\">testing 3</p>\n            <p className=\"test\">testing 4</p>\n            <p className=\"test\">testing 5</p>\n            <p className=\"test\">testing 2</p>\n            <p className=\"test\">testing 3</p>\n            <p className=\"test\">testing 4</p>\n            <p className=\"test\">testing 5</p>\n            <p className=\"test\">testing 2</p>\n            <p className=\"test\">testing 3</p>\n            <p className=\"test\">testing 4</p>\n            <p className=\"test\">testing 5</p>\n          </div>\n          <div className=\"test-div\">\n            <p className=\"testing1\">testing <span className=\"testing2\">6</span></p>\n          </div>\n        </header>\n        <Testing />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}